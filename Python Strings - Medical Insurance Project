"""
Python Strings: Medical Insurance Project
You are a doctor who needs to clean up medical patient records, which are currently stored in one large string.

In this project, you will use your new knowledge of Python strings to obtain and clean up medical data so that it is easier to read and analyze.

Let’s get started!

Tasks
21/22 Complete
Mark the tasks as complete by checking them off
Working with Strings
1.
First, take a look at the code in script.py.

The string medical_data stores the medical records for ten individuals. Each record is separated by a ; and contains the name, age, BMI (body mass index), and insurance cost for an individual, in that order.

Print medical_data to see the output in the terminal


Stuck? Get a hint
2.
We want the insurance costs to be represented in US dollars.

Replace all instances of # in medical_data with $. Store the result in a variable called updated_medical_data.

Print updated_medical_data.


Stuck? Get a hint
3.
We want to calculate the number of medical records in our data.

Create a variable called num_records and initialize it at 0.


Stuck? Get a hint
4.
Next, write a for loop to iterate through the updated_medical_data string. Inside of the loop, add 1 to num_records when the current character is equal to $.


Stuck? Get a hint
5.
Outside of the loop, print num_records with the following message:

There are {num_records} medical records in the data.

Stuck? Get a hint
Splitting Strings
6.
The medical data in its current form is difficult to analyze. An essential job for a data scientist is to clean up data so that it’s easy to work with.

Let’s start off by splitting the updated_medical_data string into a list of each medical record. Remember that each medical record is separated by a ; in the string.

Store the result in a variable called medical_data_split and print this variable.


Stuck? Get a hint
7.
Our data is now stored in a list, but it is still hard to read. Let’s split each medical record into its own list.

First, define an empty list called medical_records.


Stuck? Get a hint
8.
Next, iterate through medical_data_split and for each record, split the string after each comma (,) and append the split string to medical_records.

Print medical_records after the loop.


Stuck? Get a hint
Cleaning Data
9.
Our data is now slightly more readable. However, it is not properly formatted – it contains unnecessary whitespace.

To fix this, let’s start by creating an empty list called medical_records_clean.


Stuck? Get a hint
10.
Next, use a for loop to iterate through medical_records.

Inside of the loop, create an empty list called record_clean. We’ll use this list to store a formatted version of each medical record.


Stuck? Get a hint
11.
After the record_clean variable, create a nested for loop that goes through each record:

for item in record:
Inside of this loop, append item.strip() to record_clean to remove any whitespace from the string.


Stuck? Get a hint
12.
Finally, we need to add each cleaned up record to medical_records_clean.

Outside of the nested for loop, append record_clean to medical_records_clean.


Stuck? Get a hint
13.
Print medical_records_clean outside of the for loops to see the output.

You should see output that is formatted and much easier to read.


Stuck? Get a hint
Analyzing Data
14.
Our data is now clean and ready for analysis.

For example, to print out the names of each of the ten individuals, we can use the following loop:

for record in medical_records_clean:
  print(record[0])
Add this loop to your code and click “Save.”


Stuck? Get a hint
15.
You want all of the names in the medical records to be in uppercase characters.

In the for loop, update records[0] before the print statement so that all of the characters are uppercase.

Click “Save” to see the result.


Stuck? Get a hint
16.
Let’s store each name, age, BMI, and insurance cost in separate lists.

To start, create four empty lists:

names
ages
bmis
insurance_costs

Stuck? Get a hint
17.
Next, iterate through medical_records_clean and for each record:

Append the name to names.
Append the age to ages.
Append the BMI to bmis.
Append the insurance cost to insurance_costs.

Stuck? Get a hint
18.
Print names, ages, bmis, and insurance_costs outside of the loop.

Make sure the output is what you expect.


Hint
Use the following code to print names, ages, bmis, and insurance_costs:

print("Names: " + str(names))
print("Ages: " + str(ages))
print("BMI: "  + str(bmis))
print("Insurance Costs: " + str(insurance_costs))
The output should look like the following:

Names: ['MARINA ALLISON', 'MARKUS VALDEZ', 'CONNIE BALLARD', 'DARNELL WEBER', 'SYLVIE CHARLES', 'VINAY PADILLA', 'MEREDITH SANTIAGO', 'ANDRE MCCARTY', 'LORENA HODSON', 'ISAAC VU']
Ages: ['27', '30', '43', '35', '22', '24', '51', '19', '65', '34']
Ages: ['27', '30', '43', '35', '22', '24', '51', '19', '65', '34']
BMI: ['31.1', '22.4', '25.3', '20.6', '22.1', '26.9', '29.3', '22.7', '33.1', '24.8']
Insurance Costs: ['$7010.0', '$4050.0', '$12060.0', '$7500.0', '$3022.0', '$4620.0', '$16330.0', '$2900.0', '$19370.0', '$7045.0']
19.
Now that all of our data is in separate lists, we can easily perform analysis on that data. Let’s calculate the average BMI in our dataset.

First, create a variable called total_bmi and set it equal to 0.


Stuck? Get a hint
20.
Next, use a for loop to iterate through bmis and add each bmi to total_bmi.

Remember to convert bmi to a float.


Hint
The for loop should look like the following:

for bmi in bmis:
  total_bmi += float(bmi)
21.
After the for loop, create a variable called average_bmi that stores the total_bmi divided by the length of the bmis list.

Print out average_bmi with the following message:

Average BMI: {average_bmi}

Stuck? Get a hint
Extra
22.
Congratulations! In this project, you used Python strings to transform and clean up medical data.

As a data scientist, it’s important that you have clean and accurate data before you analyze it. You now have a better idea of the data preparation process moving forward.

If you’d like extra practice with Python strings, here are some suggestions to get you started:

Calculate the average insurance cost in insurance_costs. You will have to remove the $ in order to calculate this.
Write a for loop that outputs a string for each individual in the following format:
Marina is 27 year olds with a BMI of 31.1 and an insurance cost of $7010.0.
Markus is 30 years old with a BMI of 22.4 and an insurance cost of $4050.0
...
...
Happy coding!
"""



medical_data = \
"""Marina Allison   ,27   ,   31.1 , 
#7010.0   ;Markus Valdez   ,   30, 
22.4,   #4050.0 ;Connie Ballard ,43 
,   25.3 , #12060.0 ;Darnell Weber   
,   35   , 20.6   , #7500.0;
Sylvie Charles   ,22, 22.1 
,#3022.0   ;   Vinay Padilla,24,   
26.9 ,#4620.0 ;Meredith Santiago, 51   , 
29.3 ,#16330.0;   Andre Mccarty, 
19,22.7 , #2900.0 ; 
Lorena Hodson ,65, 33.1 , #19370.0; 
Isaac Vu ,34, 24.8,   #7045.0"""

# Add your code here
#print(medical_data)

updated_medical_data = medical_data.replace('#', '$')
#print(updated_medical_data)

num_records = 0
for char in updated_medical_data:
  if char == '$':
    num_records += 1
print("There are {num_records} medical records in the data.".format(num_records=num_records))

medical_data_split = updated_medical_data.split(';')
#print(medical_data_split)

medical_records = []
for record in medical_data_split:
  medical_records.append(record.split(','))
#print(medical_records)

medical_records_clean = []
for record in medical_records:
  record_clean = []
  for item in record:
    record_clean.append(item.strip())
  medical_records_clean.append(record_clean)

print(medical_records_clean)

for record in medical_records_clean:
  print(record[0].upper())

names = []
ages = []
bmis = []
insurance_costs = []

for record in medical_records_clean:
  names.append(record[0])
  ages.append(record[1])
  bmis.append(record[2])
  insurance_costs.append(record[3])

print("Names: " + str(names))
print("Ages: " + str(ages))
print("BMIs: " + str(bmis))
print("Insurance costs: " + str(insurance_costs))

total_bmi = 0

for bmi in bmis:
  total_bmi += float(bmi)
average_bmi = total_bmi / len(bmis)
print("Average BMI: {average_bmi}.".format(average_bmi=round(average_bmi, 3)))

total_cost = 0
cost = []
for i in insurance_costs:
  cost.append(i.replace('$',''))

for i in cost:
  total_cost += float(i)

avg_cost = total_cost / len(insurance_costs)
print('Average Insurance Cost :', round(avg_cost,3))

for i in range(len(names)):
  print(names[i] + ' is ' + ages[i] + ' years old with a BMI of ' + bmis[i] + ' and an insurance cost of ' + insurance_costs[i] + '.')


""" Output:
There are 10 medical records in the data.
[['Marina Allison', '27', '31.1', '$7010.0'], ['Markus Valdez', '30', '22.4', '$4050.0'], ['Connie Ballard', '43', '25.3', '$12060.0'], ['Darnell Weber', '35', '20.6', '$7500.0'], ['Sylvie Charles', '22', '22.1', '$3022.0'], ['Vinay Padilla', '24', '26.9', '$4620.0'], ['Meredith Santiago', '51', '29.3', '$16330.0'], ['Andre Mccarty', '19', '22.7', '$2900.0'], ['Lorena Hodson', '65', '33.1', '$19370.0'], ['Isaac Vu', '34', '24.8', '$7045.0']]
MARINA ALLISON
MARKUS VALDEZ
CONNIE BALLARD
DARNELL WEBER
SYLVIE CHARLES
VINAY PADILLA
MEREDITH SANTIAGO
ANDRE MCCARTY
LORENA HODSON
ISAAC VU
Names: ['Marina Allison', 'Markus Valdez', 'Connie Ballard', 'Darnell Weber', 'Sylvie Charles', 'Vinay Padilla', 'Meredith Santiago', 'Andre Mccarty', 'Lorena Hodson', 'Isaac Vu']
Ages: ['27', '30', '43', '35', '22', '24', '51', '19', '65', '34']
BMIs: ['31.1', '22.4', '25.3', '20.6', '22.1', '26.9', '29.3', '22.7', '33.1', '24.8']
Insurance costs: ['$7010.0', '$4050.0', '$12060.0', '$7500.0', '$3022.0', '$4620.0', '$16330.0', '$2900.0', '$19370.0', '$7045.0']
Average BMI: 25.83.
Average Insurance Cost : 8390.7
Marina Allison is 27 years old with a BMI of 31.1 and an insurance cost of $7010.0.
Markus Valdez is 30 years old with a BMI of 22.4 and an insurance cost of $4050.0.
Connie Ballard is 43 years old with a BMI of 25.3 and an insurance cost of $12060.0.
Darnell Weber is 35 years old with a BMI of 20.6 and an insurance cost of $7500.0.
Sylvie Charles is 22 years old with a BMI of 22.1 and an insurance cost of $3022.0.
Vinay Padilla is 24 years old with a BMI of 26.9 and an insurance cost of $4620.0.
Meredith Santiago is 51 years old with a BMI of 29.3 and an insurance cost of $16330.0.
Andre Mccarty is 19 years old with a BMI of 22.7 and an insurance cost of $2900.0.
Lorena Hodson is 65 years old with a BMI of 33.1 and an insurance cost of $19370.0.
Isaac Vu is 34 years old with a BMI of 24.8 and an insurance cost of $7045.0.
"""
